// Generated by rstantools.  Do not edit by hand.

/*
    covid19distancingPackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    covid19distancingPackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with covid19distancingPackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_seeiqr_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_seeiqr");
    reader.add_event(224, 222, "end", "model_seeiqr");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
seeiqr(const T0__& t,
           const std::vector<T1__>& state,
           const std::vector<T2__>& theta,
           const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 7;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        stan::math::assign(S,get_base1(state, 1, "state", 1));
        current_statement_begin__ = 8;
        local_scalar_t__ E1(DUMMY_VAR__);
        (void) E1;  // dummy to suppress unused var warning
        stan::math::initialize(E1, DUMMY_VAR__);
        stan::math::fill(E1, DUMMY_VAR__);
        stan::math::assign(E1,get_base1(state, 2, "state", 1));
        current_statement_begin__ = 9;
        local_scalar_t__ E2(DUMMY_VAR__);
        (void) E2;  // dummy to suppress unused var warning
        stan::math::initialize(E2, DUMMY_VAR__);
        stan::math::fill(E2, DUMMY_VAR__);
        stan::math::assign(E2,get_base1(state, 3, "state", 1));
        current_statement_begin__ = 10;
        local_scalar_t__ I(DUMMY_VAR__);
        (void) I;  // dummy to suppress unused var warning
        stan::math::initialize(I, DUMMY_VAR__);
        stan::math::fill(I, DUMMY_VAR__);
        stan::math::assign(I,get_base1(state, 4, "state", 1));
        current_statement_begin__ = 11;
        local_scalar_t__ Q(DUMMY_VAR__);
        (void) Q;  // dummy to suppress unused var warning
        stan::math::initialize(Q, DUMMY_VAR__);
        stan::math::fill(Q, DUMMY_VAR__);
        stan::math::assign(Q,get_base1(state, 5, "state", 1));
        current_statement_begin__ = 12;
        local_scalar_t__ R(DUMMY_VAR__);
        (void) R;  // dummy to suppress unused var warning
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        stan::math::assign(R,get_base1(state, 6, "state", 1));
        current_statement_begin__ = 13;
        local_scalar_t__ Sd(DUMMY_VAR__);
        (void) Sd;  // dummy to suppress unused var warning
        stan::math::initialize(Sd, DUMMY_VAR__);
        stan::math::fill(Sd, DUMMY_VAR__);
        stan::math::assign(Sd,get_base1(state, 7, "state", 1));
        current_statement_begin__ = 14;
        local_scalar_t__ E1d(DUMMY_VAR__);
        (void) E1d;  // dummy to suppress unused var warning
        stan::math::initialize(E1d, DUMMY_VAR__);
        stan::math::fill(E1d, DUMMY_VAR__);
        stan::math::assign(E1d,get_base1(state, 8, "state", 1));
        current_statement_begin__ = 15;
        local_scalar_t__ E2d(DUMMY_VAR__);
        (void) E2d;  // dummy to suppress unused var warning
        stan::math::initialize(E2d, DUMMY_VAR__);
        stan::math::fill(E2d, DUMMY_VAR__);
        stan::math::assign(E2d,get_base1(state, 9, "state", 1));
        current_statement_begin__ = 16;
        local_scalar_t__ Id(DUMMY_VAR__);
        (void) Id;  // dummy to suppress unused var warning
        stan::math::initialize(Id, DUMMY_VAR__);
        stan::math::fill(Id, DUMMY_VAR__);
        stan::math::assign(Id,get_base1(state, 10, "state", 1));
        current_statement_begin__ = 17;
        local_scalar_t__ Qd(DUMMY_VAR__);
        (void) Qd;  // dummy to suppress unused var warning
        stan::math::initialize(Qd, DUMMY_VAR__);
        stan::math::fill(Qd, DUMMY_VAR__);
        stan::math::assign(Qd,get_base1(state, 11, "state", 1));
        current_statement_begin__ = 18;
        local_scalar_t__ Rd(DUMMY_VAR__);
        (void) Rd;  // dummy to suppress unused var warning
        stan::math::initialize(Rd, DUMMY_VAR__);
        stan::math::fill(Rd, DUMMY_VAR__);
        stan::math::assign(Rd,get_base1(state, 12, "state", 1));
        current_statement_begin__ = 20;
        local_scalar_t__ R0(DUMMY_VAR__);
        (void) R0;  // dummy to suppress unused var warning
        stan::math::initialize(R0, DUMMY_VAR__);
        stan::math::fill(R0, DUMMY_VAR__);
        stan::math::assign(R0,get_base1(theta, 1, "theta", 1));
        current_statement_begin__ = 21;
        local_scalar_t__ f2(DUMMY_VAR__);
        (void) f2;  // dummy to suppress unused var warning
        stan::math::initialize(f2, DUMMY_VAR__);
        stan::math::fill(f2, DUMMY_VAR__);
        stan::math::assign(f2,get_base1(theta, 2, "theta", 1));
        current_statement_begin__ = 23;
        local_scalar_t__ N(DUMMY_VAR__);
        (void) N;  // dummy to suppress unused var warning
        stan::math::initialize(N, DUMMY_VAR__);
        stan::math::fill(N, DUMMY_VAR__);
        stan::math::assign(N,get_base1(x_r, 1, "x_r", 1));
        current_statement_begin__ = 24;
        local_scalar_t__ D(DUMMY_VAR__);
        (void) D;  // dummy to suppress unused var warning
        stan::math::initialize(D, DUMMY_VAR__);
        stan::math::fill(D, DUMMY_VAR__);
        stan::math::assign(D,get_base1(x_r, 2, "x_r", 1));
        current_statement_begin__ = 25;
        local_scalar_t__ k1(DUMMY_VAR__);
        (void) k1;  // dummy to suppress unused var warning
        stan::math::initialize(k1, DUMMY_VAR__);
        stan::math::fill(k1, DUMMY_VAR__);
        stan::math::assign(k1,get_base1(x_r, 3, "x_r", 1));
        current_statement_begin__ = 26;
        local_scalar_t__ k2(DUMMY_VAR__);
        (void) k2;  // dummy to suppress unused var warning
        stan::math::initialize(k2, DUMMY_VAR__);
        stan::math::fill(k2, DUMMY_VAR__);
        stan::math::assign(k2,get_base1(x_r, 4, "x_r", 1));
        current_statement_begin__ = 27;
        local_scalar_t__ q(DUMMY_VAR__);
        (void) q;  // dummy to suppress unused var warning
        stan::math::initialize(q, DUMMY_VAR__);
        stan::math::fill(q, DUMMY_VAR__);
        stan::math::assign(q,get_base1(x_r, 5, "x_r", 1));
        current_statement_begin__ = 28;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,get_base1(x_r, 6, "x_r", 1));
        current_statement_begin__ = 29;
        local_scalar_t__ ur(DUMMY_VAR__);
        (void) ur;  // dummy to suppress unused var warning
        stan::math::initialize(ur, DUMMY_VAR__);
        stan::math::fill(ur, DUMMY_VAR__);
        stan::math::assign(ur,get_base1(x_r, 7, "x_r", 1));
        current_statement_begin__ = 30;
        local_scalar_t__ f1(DUMMY_VAR__);
        (void) f1;  // dummy to suppress unused var warning
        stan::math::initialize(f1, DUMMY_VAR__);
        stan::math::fill(f1, DUMMY_VAR__);
        stan::math::assign(f1,get_base1(x_r, 8, "x_r", 1));
        current_statement_begin__ = 31;
        local_scalar_t__ start_decline(DUMMY_VAR__);
        (void) start_decline;  // dummy to suppress unused var warning
        stan::math::initialize(start_decline, DUMMY_VAR__);
        stan::math::fill(start_decline, DUMMY_VAR__);
        stan::math::assign(start_decline,get_base1(x_r, 9, "x_r", 1));
        current_statement_begin__ = 32;
        local_scalar_t__ end_decline(DUMMY_VAR__);
        (void) end_decline;  // dummy to suppress unused var warning
        stan::math::initialize(end_decline, DUMMY_VAR__);
        stan::math::fill(end_decline, DUMMY_VAR__);
        stan::math::assign(end_decline,get_base1(x_r, 10, "x_r", 1));
        current_statement_begin__ = 33;
        local_scalar_t__ fixed_f_forecast(DUMMY_VAR__);
        (void) fixed_f_forecast;  // dummy to suppress unused var warning
        stan::math::initialize(fixed_f_forecast, DUMMY_VAR__);
        stan::math::fill(fixed_f_forecast, DUMMY_VAR__);
        stan::math::assign(fixed_f_forecast,get_base1(x_r, 11, "x_r", 1));
        current_statement_begin__ = 34;
        local_scalar_t__ last_day_obs(DUMMY_VAR__);
        (void) last_day_obs;  // dummy to suppress unused var warning
        stan::math::initialize(last_day_obs, DUMMY_VAR__);
        stan::math::fill(last_day_obs, DUMMY_VAR__);
        stan::math::assign(last_day_obs,get_base1(x_r, 12, "x_r", 1));
        current_statement_begin__ = 35;
        local_scalar_t__ day_start_fixed_f_forecast(DUMMY_VAR__);
        (void) day_start_fixed_f_forecast;  // dummy to suppress unused var warning
        stan::math::initialize(day_start_fixed_f_forecast, DUMMY_VAR__);
        stan::math::fill(day_start_fixed_f_forecast, DUMMY_VAR__);
        stan::math::assign(day_start_fixed_f_forecast,get_base1(x_r, 13, "x_r", 1));
        current_statement_begin__ = 37;
        validate_non_negative_index("dydt", "12", 12);
        std::vector<local_scalar_t__  > dydt(12, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(dydt, DUMMY_VAR__);
        stan::math::fill(dydt, DUMMY_VAR__);
        current_statement_begin__ = 39;
        local_scalar_t__ f(DUMMY_VAR__);
        (void) f;  // dummy to suppress unused var warning
        stan::math::initialize(f, DUMMY_VAR__);
        stan::math::fill(f, DUMMY_VAR__);
        current_statement_begin__ = 41;
        stan::math::assign(f, f1);
        current_statement_begin__ = 42;
        if (as_bool(logical_lt(t, start_decline))) {
            current_statement_begin__ = 43;
            stan::math::assign(f, f1);
        }
        current_statement_begin__ = 45;
        if (as_bool((primitive_value(logical_gte(t, start_decline)) && primitive_value(logical_lt(t, end_decline))))) {
            current_statement_begin__ = 46;
            stan::math::assign(f, (f2 + (((end_decline - t) * (f1 - f2)) / (end_decline - start_decline))));
        }
        current_statement_begin__ = 48;
        if (as_bool(logical_gte(t, end_decline))) {
            current_statement_begin__ = 49;
            stan::math::assign(f, f2);
        }
        current_statement_begin__ = 51;
        if (as_bool((primitive_value(logical_gte(t, day_start_fixed_f_forecast)) && primitive_value(logical_neq(fixed_f_forecast, 0))))) {
            current_statement_begin__ = 52;
            stan::math::assign(f, fixed_f_forecast);
        }
        current_statement_begin__ = 55;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    (((((-((R0 / (D + (1 / k2)))) * ((I + E2) + (f * (Id + E2d)))) * S) / N) - (r * S)) + (ur * Sd)), 
                    "assigning variable dydt");
        current_statement_begin__ = 56;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    (((((((R0 / (D + (1 / k2))) * ((I + E2) + (f * (Id + E2d)))) * S) / N) - (k1 * E1)) - (r * E1)) + (ur * E1d)), 
                    "assigning variable dydt");
        current_statement_begin__ = 57;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    ((((k1 * E1) - (k2 * E2)) - (r * E2)) + (ur * E2d)), 
                    "assigning variable dydt");
        current_statement_begin__ = 58;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                    (((((k2 * E2) - (q * I)) - (I / D)) - (r * I)) + (ur * Id)), 
                    "assigning variable dydt");
        current_statement_begin__ = 59;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                    ((((q * I) - (Q / D)) - (r * Q)) + (ur * Qd)), 
                    "assigning variable dydt");
        current_statement_begin__ = 60;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                    ((((I / D) + (Q / D)) - (r * R)) + (ur * Rd)), 
                    "assigning variable dydt");
        current_statement_begin__ = 62;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                    (((((-(((f * R0) / (D + (1 / k2)))) * ((I + E2) + (f * (Id + E2d)))) * Sd) / N) + (r * S)) - (ur * Sd)), 
                    "assigning variable dydt");
        current_statement_begin__ = 63;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                    ((((((((f * R0) / (D + (1 / k2))) * ((I + E2) + (f * (Id + E2d)))) * Sd) / N) - (k1 * E1d)) + (r * E1)) - (ur * E1d)), 
                    "assigning variable dydt");
        current_statement_begin__ = 64;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list()), 
                    ((((k1 * E1d) - (k2 * E2d)) + (r * E2)) - (ur * E2d)), 
                    "assigning variable dydt");
        current_statement_begin__ = 65;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list()), 
                    (((((k2 * E2d) - (q * Id)) - (Id / D)) + (r * I)) - (ur * Id)), 
                    "assigning variable dydt");
        current_statement_begin__ = 66;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list()), 
                    ((((q * Id) - (Qd / D)) + (r * Q)) - (ur * Qd)), 
                    "assigning variable dydt");
        current_statement_begin__ = 67;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list()), 
                    ((((Id / D) + (Qd / D)) + (r * R)) - (ur * Rd)), 
                    "assigning variable dydt");
        current_statement_begin__ = 69;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dydt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct seeiqr_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const T0__& t,
           const std::vector<T1__>& state,
           const std::vector<T2__>& theta,
           const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__) const {
        return seeiqr(t, state, theta, x_r, x_i, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_seeiqr : public prob_grad {
private:
        int T;
        int N;
        std::vector<double> y0;
        double t0;
        std::vector<double> time;
        std::vector<int> days;
        int last_day_obs;
        std::vector<int> daily_cases;
        std::vector<double> x_r;
        std::vector<double> sampFrac;
        double delayScale;
        double delayShape;
        std::vector<int> time_day_id;
        std::vector<int> time_day_id0;
        std::vector<double> R0_prior;
        double phi_prior;
        std::vector<double> f2_prior;
        int day_inc_sampling;
        std::vector<double> sampFrac2_prior;
        int priors_only;
        int est_phi;
        int n_sampFrac2;
        int obs_model;
        double rw_sigma;
        std::vector<int> tests;
        std::vector<double> ode_control;
        int N_lik;
        std::vector<int> dat_in_lik;
        std::vector<int> x_i;
public:
    model_seeiqr(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_seeiqr(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_seeiqr_namespace::model_seeiqr";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 0);
            current_statement_begin__ = 74;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 75;
            validate_non_negative_index("y0", "12", 12);
            context__.validate_dims("data initialization", "y0", "double", context__.to_vec(12));
            y0 = std::vector<double>(12, double(0));
            vals_r__ = context__.vals_r("y0");
            pos__ = 0;
            size_t y0_k_0_max__ = 12;
            for (size_t k_0__ = 0; k_0__ < y0_k_0_max__; ++k_0__) {
                y0[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 76;
            context__.validate_dims("data initialization", "t0", "double", context__.to_vec());
            t0 = double(0);
            vals_r__ = context__.vals_r("t0");
            pos__ = 0;
            t0 = vals_r__[pos__++];
            current_statement_begin__ = 77;
            validate_non_negative_index("time", "T", T);
            context__.validate_dims("data initialization", "time", "double", context__.to_vec(T));
            time = std::vector<double>(T, double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < time_k_0_max__; ++k_0__) {
                time[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 78;
            validate_non_negative_index("days", "N", N);
            context__.validate_dims("data initialization", "days", "int", context__.to_vec(N));
            days = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("days");
            pos__ = 0;
            size_t days_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < days_k_0_max__; ++k_0__) {
                days[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "last_day_obs", "int", context__.to_vec());
            last_day_obs = int(0);
            vals_i__ = context__.vals_i("last_day_obs");
            pos__ = 0;
            last_day_obs = vals_i__[pos__++];
            current_statement_begin__ = 80;
            validate_non_negative_index("daily_cases", "last_day_obs", last_day_obs);
            context__.validate_dims("data initialization", "daily_cases", "int", context__.to_vec(last_day_obs));
            daily_cases = std::vector<int>(last_day_obs, int(0));
            vals_i__ = context__.vals_i("daily_cases");
            pos__ = 0;
            size_t daily_cases_k_0_max__ = last_day_obs;
            for (size_t k_0__ = 0; k_0__ < daily_cases_k_0_max__; ++k_0__) {
                daily_cases[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 81;
            validate_non_negative_index("x_r", "13", 13);
            context__.validate_dims("data initialization", "x_r", "double", context__.to_vec(13));
            x_r = std::vector<double>(13, double(0));
            vals_r__ = context__.vals_r("x_r");
            pos__ = 0;
            size_t x_r_k_0_max__ = 13;
            for (size_t k_0__ = 0; k_0__ < x_r_k_0_max__; ++k_0__) {
                x_r[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 82;
            validate_non_negative_index("sampFrac", "N", N);
            context__.validate_dims("data initialization", "sampFrac", "double", context__.to_vec(N));
            sampFrac = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("sampFrac");
            pos__ = 0;
            size_t sampFrac_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < sampFrac_k_0_max__; ++k_0__) {
                sampFrac[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "delayScale", "double", context__.to_vec());
            delayScale = double(0);
            vals_r__ = context__.vals_r("delayScale");
            pos__ = 0;
            delayScale = vals_r__[pos__++];
            current_statement_begin__ = 84;
            context__.validate_dims("data initialization", "delayShape", "double", context__.to_vec());
            delayShape = double(0);
            vals_r__ = context__.vals_r("delayShape");
            pos__ = 0;
            delayShape = vals_r__[pos__++];
            current_statement_begin__ = 85;
            validate_non_negative_index("time_day_id", "N", N);
            context__.validate_dims("data initialization", "time_day_id", "int", context__.to_vec(N));
            time_day_id = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("time_day_id");
            pos__ = 0;
            size_t time_day_id_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < time_day_id_k_0_max__; ++k_0__) {
                time_day_id[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 86;
            validate_non_negative_index("time_day_id0", "N", N);
            context__.validate_dims("data initialization", "time_day_id0", "int", context__.to_vec(N));
            time_day_id0 = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("time_day_id0");
            pos__ = 0;
            size_t time_day_id0_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < time_day_id0_k_0_max__; ++k_0__) {
                time_day_id0[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 87;
            validate_non_negative_index("R0_prior", "2", 2);
            context__.validate_dims("data initialization", "R0_prior", "double", context__.to_vec(2));
            R0_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("R0_prior");
            pos__ = 0;
            size_t R0_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < R0_prior_k_0_max__; ++k_0__) {
                R0_prior[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 88;
            context__.validate_dims("data initialization", "phi_prior", "double", context__.to_vec());
            phi_prior = double(0);
            vals_r__ = context__.vals_r("phi_prior");
            pos__ = 0;
            phi_prior = vals_r__[pos__++];
            current_statement_begin__ = 89;
            validate_non_negative_index("f2_prior", "2", 2);
            context__.validate_dims("data initialization", "f2_prior", "double", context__.to_vec(2));
            f2_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("f2_prior");
            pos__ = 0;
            size_t f2_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < f2_prior_k_0_max__; ++k_0__) {
                f2_prior[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 90;
            context__.validate_dims("data initialization", "day_inc_sampling", "int", context__.to_vec());
            day_inc_sampling = int(0);
            vals_i__ = context__.vals_i("day_inc_sampling");
            pos__ = 0;
            day_inc_sampling = vals_i__[pos__++];
            current_statement_begin__ = 91;
            validate_non_negative_index("sampFrac2_prior", "2", 2);
            context__.validate_dims("data initialization", "sampFrac2_prior", "double", context__.to_vec(2));
            sampFrac2_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("sampFrac2_prior");
            pos__ = 0;
            size_t sampFrac2_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < sampFrac2_prior_k_0_max__; ++k_0__) {
                sampFrac2_prior[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "priors_only", "int", context__.to_vec());
            priors_only = int(0);
            vals_i__ = context__.vals_i("priors_only");
            pos__ = 0;
            priors_only = vals_i__[pos__++];
            check_greater_or_equal(function__, "priors_only", priors_only, 0);
            check_less_or_equal(function__, "priors_only", priors_only, 1);
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "est_phi", "int", context__.to_vec());
            est_phi = int(0);
            vals_i__ = context__.vals_i("est_phi");
            pos__ = 0;
            est_phi = vals_i__[pos__++];
            check_greater_or_equal(function__, "est_phi", est_phi, 0);
            check_less_or_equal(function__, "est_phi", est_phi, 1);
            current_statement_begin__ = 94;
            context__.validate_dims("data initialization", "n_sampFrac2", "int", context__.to_vec());
            n_sampFrac2 = int(0);
            vals_i__ = context__.vals_i("n_sampFrac2");
            pos__ = 0;
            n_sampFrac2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_sampFrac2", n_sampFrac2, 0);
            check_less_or_equal(function__, "n_sampFrac2", n_sampFrac2, N);
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "obs_model", "int", context__.to_vec());
            obs_model = int(0);
            vals_i__ = context__.vals_i("obs_model");
            pos__ = 0;
            obs_model = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_model", obs_model, 0);
            check_less_or_equal(function__, "obs_model", obs_model, 2);
            current_statement_begin__ = 96;
            context__.validate_dims("data initialization", "rw_sigma", "double", context__.to_vec());
            rw_sigma = double(0);
            vals_r__ = context__.vals_r("rw_sigma");
            pos__ = 0;
            rw_sigma = vals_r__[pos__++];
            check_greater_or_equal(function__, "rw_sigma", rw_sigma, 0);
            current_statement_begin__ = 97;
            validate_non_negative_index("tests", "N", N);
            context__.validate_dims("data initialization", "tests", "int", context__.to_vec(N));
            tests = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("tests");
            pos__ = 0;
            size_t tests_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < tests_k_0_max__; ++k_0__) {
                tests[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 98;
            validate_non_negative_index("ode_control", "3", 3);
            context__.validate_dims("data initialization", "ode_control", "double", context__.to_vec(3));
            ode_control = std::vector<double>(3, double(0));
            vals_r__ = context__.vals_r("ode_control");
            pos__ = 0;
            size_t ode_control_k_0_max__ = 3;
            for (size_t k_0__ = 0; k_0__ < ode_control_k_0_max__; ++k_0__) {
                ode_control[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 99;
            context__.validate_dims("data initialization", "N_lik", "int", context__.to_vec());
            N_lik = int(0);
            vals_i__ = context__.vals_i("N_lik");
            pos__ = 0;
            N_lik = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_lik", N_lik, 1);
            current_statement_begin__ = 100;
            validate_non_negative_index("dat_in_lik", "N_lik", N_lik);
            context__.validate_dims("data initialization", "dat_in_lik", "int", context__.to_vec(N_lik));
            dat_in_lik = std::vector<int>(N_lik, int(0));
            vals_i__ = context__.vals_i("dat_in_lik");
            pos__ = 0;
            size_t dat_in_lik_k_0_max__ = N_lik;
            for (size_t k_0__ = 0; k_0__ < dat_in_lik_k_0_max__; ++k_0__) {
                dat_in_lik[k_0__] = vals_i__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 103;
            validate_non_negative_index("x_i", "0", 0);
            x_i = std::vector<int>(0, int(0));
            stan::math::fill(x_i, std::numeric_limits<int>::min());
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 106;
            num_params_r__ += 1;
            current_statement_begin__ = 107;
            num_params_r__ += 1;
            current_statement_begin__ = 108;
            validate_non_negative_index("phi", "est_phi", est_phi);
            num_params_r__ += (1 * est_phi);
            current_statement_begin__ = 109;
            validate_non_negative_index("sampFrac2", "n_sampFrac2", n_sampFrac2);
            num_params_r__ += (1 * n_sampFrac2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_seeiqr() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 106;
        if (!(context__.contains_r("R0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable R0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("R0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "R0", "double", context__.to_vec());
        double R0(0);
        R0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(R0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable R0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 107;
        if (!(context__.contains_r("f2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable f2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("f2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "f2", "double", context__.to_vec());
        double f2(0);
        f2 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, f2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable f2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 108;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "est_phi", est_phi);
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(est_phi));
        std::vector<double> phi(est_phi, double(0));
        size_t phi_k_0_max__ = est_phi;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = est_phi;
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 109;
        if (!(context__.contains_r("sampFrac2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sampFrac2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sampFrac2");
        pos__ = 0U;
        validate_non_negative_index("sampFrac2", "n_sampFrac2", n_sampFrac2);
        context__.validate_dims("parameter initialization", "sampFrac2", "double", context__.to_vec(n_sampFrac2));
        std::vector<double> sampFrac2(n_sampFrac2, double(0));
        size_t sampFrac2_k_0_max__ = n_sampFrac2;
        for (size_t k_0__ = 0; k_0__ < sampFrac2_k_0_max__; ++k_0__) {
            sampFrac2[k_0__] = vals_r__[pos__++];
        }
        size_t sampFrac2_i_0_max__ = n_sampFrac2;
        for (size_t i_0__ = 0; i_0__ < sampFrac2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, sampFrac2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sampFrac2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 106;
            local_scalar_t__ R0;
            (void) R0;  // dummy to suppress unused var warning
            if (jacobian__)
                R0 = in__.scalar_constrain(lp__);
            else
                R0 = in__.scalar_constrain();
            current_statement_begin__ = 107;
            local_scalar_t__ f2;
            (void) f2;  // dummy to suppress unused var warning
            if (jacobian__)
                f2 = in__.scalar_lub_constrain(0, 1, lp__);
            else
                f2 = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 108;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = est_phi;
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    phi.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 109;
            std::vector<local_scalar_t__> sampFrac2;
            size_t sampFrac2_d_0_max__ = n_sampFrac2;
            sampFrac2.reserve(sampFrac2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sampFrac2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sampFrac2.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    sampFrac2.push_back(in__.scalar_lub_constrain(0, 1));
            }
            // transformed parameters
            current_statement_begin__ = 112;
            local_scalar_t__ meanDelay;
            (void) meanDelay;  // dummy to suppress unused var warning
            stan::math::initialize(meanDelay, DUMMY_VAR__);
            stan::math::fill(meanDelay, DUMMY_VAR__);
            stan::math::assign(meanDelay,(delayScale * stan::math::tgamma((1 + (1 / delayShape)))));
            current_statement_begin__ = 113;
            local_scalar_t__ dx;
            (void) dx;  // dummy to suppress unused var warning
            stan::math::initialize(dx, DUMMY_VAR__);
            stan::math::fill(dx, DUMMY_VAR__);
            stan::math::assign(dx,(get_base1(time, 2, "time", 1) - get_base1(time, 1, "time", 1)));
            current_statement_begin__ = 114;
            validate_non_negative_index("ft", "T", T);
            std::vector<local_scalar_t__> ft(T, local_scalar_t__(0));
            stan::math::initialize(ft, DUMMY_VAR__);
            stan::math::fill(ft, DUMMY_VAR__);
            current_statement_begin__ = 115;
            validate_non_negative_index("lambda_d", "N", N);
            std::vector<local_scalar_t__> lambda_d(N, local_scalar_t__(0));
            stan::math::initialize(lambda_d, DUMMY_VAR__);
            stan::math::fill(lambda_d, DUMMY_VAR__);
            current_statement_begin__ = 116;
            local_scalar_t__ sum_ft_inner;
            (void) sum_ft_inner;  // dummy to suppress unused var warning
            stan::math::initialize(sum_ft_inner, DUMMY_VAR__);
            stan::math::fill(sum_ft_inner, DUMMY_VAR__);
            current_statement_begin__ = 117;
            validate_non_negative_index("eta", "N", N);
            std::vector<local_scalar_t__> eta(N, local_scalar_t__(0));
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 118;
            local_scalar_t__ k2;
            (void) k2;  // dummy to suppress unused var warning
            stan::math::initialize(k2, DUMMY_VAR__);
            stan::math::fill(k2, DUMMY_VAR__);
            current_statement_begin__ = 119;
            local_scalar_t__ E2;
            (void) E2;  // dummy to suppress unused var warning
            stan::math::initialize(E2, DUMMY_VAR__);
            stan::math::fill(E2, DUMMY_VAR__);
            current_statement_begin__ = 120;
            local_scalar_t__ E2d;
            (void) E2d;  // dummy to suppress unused var warning
            stan::math::initialize(E2d, DUMMY_VAR__);
            stan::math::fill(E2d, DUMMY_VAR__);
            current_statement_begin__ = 121;
            validate_non_negative_index("theta", "2", 2);
            std::vector<local_scalar_t__> theta(2, local_scalar_t__(0));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 122;
            validate_non_negative_index("y_hat", "T", T);
            validate_non_negative_index("y_hat", "12", 12);
            std::vector<std::vector<local_scalar_t__> > y_hat(T, std::vector<local_scalar_t__>(12, local_scalar_t__(0)));
            stan::math::initialize(y_hat, DUMMY_VAR__);
            stan::math::fill(y_hat, DUMMY_VAR__);
            current_statement_begin__ = 123;
            local_scalar_t__ this_samp;
            (void) this_samp;  // dummy to suppress unused var warning
            stan::math::initialize(this_samp, DUMMY_VAR__);
            stan::math::fill(this_samp, DUMMY_VAR__);
            current_statement_begin__ = 124;
            validate_non_negative_index("alpha", "N", N);
            std::vector<local_scalar_t__> alpha(N, local_scalar_t__(0));
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 125;
            validate_non_negative_index("beta", "N", N);
            std::vector<local_scalar_t__> beta(N, local_scalar_t__(0));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 126;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        R0, 
                        "assigning variable theta");
            current_statement_begin__ = 127;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        f2, 
                        "assigning variable theta");
            current_statement_begin__ = 129;
            stan::math::assign(y_hat, integrate_ode_bdf(seeiqr_functor__(), y0, t0, time, theta, x_r, x_i, pstream__, get_base1(ode_control, 1, "ode_control", 1), get_base1(ode_control, 2, "ode_control", 1), get_base1(ode_control, 3, "ode_control", 1)));
            current_statement_begin__ = 131;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 132;
                stan::math::assign(this_samp, get_base1(sampFrac, n, "sampFrac", 1));
                current_statement_begin__ = 133;
                if (as_bool(logical_gt(n_sampFrac2, 1))) {
                    current_statement_begin__ = 134;
                    if (as_bool((primitive_value(logical_gte(n, day_inc_sampling)) && primitive_value(logical_lte(n, last_day_obs))))) {
                        current_statement_begin__ = 135;
                        stan::math::assign(this_samp, get_base1(sampFrac2, ((n - day_inc_sampling) + 1), "sampFrac2", 1));
                    }
                    current_statement_begin__ = 137;
                    if (as_bool((primitive_value(logical_gte(n, day_inc_sampling)) && primitive_value(logical_gt(n, last_day_obs))))) {
                        current_statement_begin__ = 138;
                        stan::math::assign(this_samp, get_base1(sampFrac2, n_sampFrac2, "sampFrac2", 1));
                    }
                }
                current_statement_begin__ = 141;
                if (as_bool(logical_eq(n_sampFrac2, 1))) {
                    current_statement_begin__ = 142;
                    stan::math::assign(this_samp, get_base1(sampFrac2, 1, "sampFrac2", 1));
                }
                current_statement_begin__ = 144;
                for (int t = 1; t <= T; ++t) {
                    current_statement_begin__ = 145;
                    stan::model::assign(ft, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable ft");
                }
                current_statement_begin__ = 147;
                for (int t = get_base1(time_day_id0, n, "time_day_id0", 1); t <= get_base1(time_day_id, n, "time_day_id", 1); ++t) {
                    current_statement_begin__ = 148;
                    stan::math::assign(k2, get_base1(x_r, 4, "x_r", 1));
                    current_statement_begin__ = 149;
                    stan::math::assign(E2, get_base1(get_base1(y_hat, t, "y_hat", 1), 3, "y_hat", 2));
                    current_statement_begin__ = 150;
                    stan::math::assign(E2d, get_base1(get_base1(y_hat, t, "y_hat", 1), 9, "y_hat", 2));
                    current_statement_begin__ = 152;
                    stan::model::assign(ft, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                (((this_samp * k2) * (E2 + E2d)) * stan::math::exp(weibull_log((get_base1(time, get_base1(time_day_id, n, "time_day_id", 1), "time", 1) - get_base1(time, t, "time", 1)), delayShape, delayScale))), 
                                "assigning variable ft");
                }
                current_statement_begin__ = 155;
                stan::math::assign(sum_ft_inner, 0);
                current_statement_begin__ = 156;
                for (int t = (get_base1(time_day_id0, n, "time_day_id0", 1) + 1); t <= (get_base1(time_day_id, n, "time_day_id", 1) - 1); ++t) {
                    current_statement_begin__ = 157;
                    stan::math::assign(sum_ft_inner, (sum_ft_inner + get_base1(ft, t, "ft", 1)));
                }
                current_statement_begin__ = 159;
                stan::model::assign(lambda_d, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            ((0.5 * dx) * ((get_base1(ft, get_base1(time_day_id0, n, "time_day_id0", 1), "ft", 1) + (2 * sum_ft_inner)) + get_base1(ft, get_base1(time_day_id, n, "time_day_id", 1), "ft", 1))), 
                            "assigning variable lambda_d");
                current_statement_begin__ = 161;
                stan::model::assign(eta, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            stan::math::log(get_base1(lambda_d, n, "lambda_d", 1)), 
                            "assigning variable eta");
            }
            current_statement_begin__ = 164;
            if (as_bool(logical_eq(obs_model, 2))) {
                current_statement_begin__ = 165;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 166;
                    stan::model::assign(eta, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                inv_logit(stan::math::exp(get_base1(eta, n, "eta", 1))), 
                                "assigning variable eta");
                    current_statement_begin__ = 167;
                    stan::model::assign(alpha, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (get_base1(eta, n, "eta", 1) * get_base1(phi, 1, "phi", 1)), 
                                "assigning variable alpha");
                    current_statement_begin__ = 168;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                ((1 - get_base1(eta, n, "eta", 1)) * get_base1(phi, 1, "phi", 1)), 
                                "assigning variable beta");
                }
            } else {
                current_statement_begin__ = 171;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 172;
                    stan::model::assign(alpha, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable alpha");
                    current_statement_begin__ = 173;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable beta");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 112;
            if (stan::math::is_uninitialized(meanDelay)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: meanDelay";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable meanDelay: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 113;
            if (stan::math::is_uninitialized(dx)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: dx";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable dx: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 114;
            size_t ft_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < ft_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(ft[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ft" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ft: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 115;
            size_t lambda_d_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < lambda_d_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(lambda_d[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_d" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_d: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 116;
            if (stan::math::is_uninitialized(sum_ft_inner)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sum_ft_inner";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sum_ft_inner: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 117;
            size_t eta_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(eta[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 118;
            if (stan::math::is_uninitialized(k2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: k2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable k2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 119;
            if (stan::math::is_uninitialized(E2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: E2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable E2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 120;
            if (stan::math::is_uninitialized(E2d)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: E2d";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable E2d: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 121;
            size_t theta_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(theta[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 122;
            size_t y_hat_k_0_max__ = T;
            size_t y_hat_k_1_max__ = 12;
            for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(y_hat[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: y_hat" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable y_hat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 123;
            if (stan::math::is_uninitialized(this_samp)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: this_samp";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable this_samp: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 124;
            size_t alpha_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(alpha[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t alpha_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "alpha[i_0__]", alpha[i_0__], 0);
            }
            current_statement_begin__ = 125;
            size_t beta_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(beta[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t beta_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "beta[i_0__]", beta[i_0__], 0);
            }
            // model body
            current_statement_begin__ = 180;
            if (as_bool((primitive_value(est_phi) && primitive_value(logical_eq(obs_model, 1))))) {
                current_statement_begin__ = 183;
                lp_accum__.add(normal_log<propto__>((1 / stan::math::sqrt(get_base1(phi, 1, "phi", 1))), 0, phi_prior));
                current_statement_begin__ = 184;
                lp_accum__.add((stan::math::log(0.5) - (1.5 * stan::math::log(get_base1(phi, 1, "phi", 1)))));
            }
            current_statement_begin__ = 186;
            if (as_bool((primitive_value(est_phi) && primitive_value(logical_eq(obs_model, 2))))) {
                current_statement_begin__ = 187;
                lp_accum__.add(normal_log<propto__>(get_base1(phi, 1, "phi", 1), 0, phi_prior));
            }
            current_statement_begin__ = 189;
            lp_accum__.add(lognormal_log<propto__>(R0, get_base1(R0_prior, 1, "R0_prior", 1), get_base1(R0_prior, 2, "R0_prior", 1)));
            current_statement_begin__ = 190;
            lp_accum__.add(beta_log<propto__>(f2, get_base1(f2_prior, 1, "f2_prior", 1), get_base1(f2_prior, 2, "f2_prior", 1)));
            current_statement_begin__ = 191;
            if (as_bool(logical_gt(n_sampFrac2, 0))) {
                current_statement_begin__ = 192;
                lp_accum__.add(beta_log<propto__>(get_base1(sampFrac2, 1, "sampFrac2", 1), get_base1(sampFrac2_prior, 1, "sampFrac2_prior", 1), get_base1(sampFrac2_prior, 2, "sampFrac2_prior", 1)));
                current_statement_begin__ = 193;
                if (as_bool(logical_gt(n_sampFrac2, 1))) {
                    current_statement_begin__ = 194;
                    for (int n = 2; n <= n_sampFrac2; ++n) {
                        current_statement_begin__ = 195;
                        lp_accum__.add(normal_log<propto__>(get_base1(sampFrac2, n, "sampFrac2", 1), get_base1(sampFrac2, (n - 1), "sampFrac2", 1), rw_sigma));
                    }
                }
            }
            current_statement_begin__ = 201;
            if (as_bool(logical_negation(priors_only))) {
                current_statement_begin__ = 202;
                if (as_bool(logical_eq(obs_model, 0))) {
                    current_statement_begin__ = 203;
                    lp_accum__.add(poisson_log_log<propto__>(stan::model::rvalue(daily_cases, stan::model::cons_list(stan::model::index_multi(dat_in_lik), stan::model::nil_index_list()), "daily_cases"), stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_multi(dat_in_lik), stan::model::nil_index_list()), "eta")));
                } else if (as_bool(logical_eq(obs_model, 1))) {
                    current_statement_begin__ = 205;
                    lp_accum__.add(neg_binomial_2_log_log<propto__>(stan::model::rvalue(daily_cases, stan::model::cons_list(stan::model::index_multi(dat_in_lik), stan::model::nil_index_list()), "daily_cases"), stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_multi(dat_in_lik), stan::model::nil_index_list()), "eta"), get_base1(phi, 1, "phi", 1)));
                } else {
                    current_statement_begin__ = 207;
                    lp_accum__.add(beta_binomial_log<propto__>(stan::model::rvalue(daily_cases, stan::model::cons_list(stan::model::index_multi(dat_in_lik), stan::model::nil_index_list()), "daily_cases"), stan::model::rvalue(tests, stan::model::cons_list(stan::model::index_multi(dat_in_lik), stan::model::nil_index_list()), "tests"), stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_multi(dat_in_lik), stan::model::nil_index_list()), "alpha"), stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_multi(dat_in_lik), stan::model::nil_index_list()), "beta")));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("R0");
        names__.push_back("f2");
        names__.push_back("phi");
        names__.push_back("sampFrac2");
        names__.push_back("meanDelay");
        names__.push_back("dx");
        names__.push_back("ft");
        names__.push_back("lambda_d");
        names__.push_back("sum_ft_inner");
        names__.push_back("eta");
        names__.push_back("k2");
        names__.push_back("E2");
        names__.push_back("E2d");
        names__.push_back("theta");
        names__.push_back("y_hat");
        names__.push_back("this_samp");
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("y_rep");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_phi);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_sampFrac2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_seeiqr_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double R0 = in__.scalar_constrain();
        vars__.push_back(R0);
        double f2 = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(f2);
        std::vector<double> phi;
        size_t phi_d_0_max__ = est_phi;
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t phi_k_0_max__ = est_phi;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        std::vector<double> sampFrac2;
        size_t sampFrac2_d_0_max__ = n_sampFrac2;
        sampFrac2.reserve(sampFrac2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sampFrac2_d_0_max__; ++d_0__) {
            sampFrac2.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t sampFrac2_k_0_max__ = n_sampFrac2;
        for (size_t k_0__ = 0; k_0__ < sampFrac2_k_0_max__; ++k_0__) {
            vars__.push_back(sampFrac2[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 112;
            double meanDelay;
            (void) meanDelay;  // dummy to suppress unused var warning
            stan::math::initialize(meanDelay, DUMMY_VAR__);
            stan::math::fill(meanDelay, DUMMY_VAR__);
            stan::math::assign(meanDelay,(delayScale * stan::math::tgamma((1 + (1 / delayShape)))));
            current_statement_begin__ = 113;
            double dx;
            (void) dx;  // dummy to suppress unused var warning
            stan::math::initialize(dx, DUMMY_VAR__);
            stan::math::fill(dx, DUMMY_VAR__);
            stan::math::assign(dx,(get_base1(time, 2, "time", 1) - get_base1(time, 1, "time", 1)));
            current_statement_begin__ = 114;
            validate_non_negative_index("ft", "T", T);
            std::vector<double> ft(T, double(0));
            stan::math::initialize(ft, DUMMY_VAR__);
            stan::math::fill(ft, DUMMY_VAR__);
            current_statement_begin__ = 115;
            validate_non_negative_index("lambda_d", "N", N);
            std::vector<double> lambda_d(N, double(0));
            stan::math::initialize(lambda_d, DUMMY_VAR__);
            stan::math::fill(lambda_d, DUMMY_VAR__);
            current_statement_begin__ = 116;
            double sum_ft_inner;
            (void) sum_ft_inner;  // dummy to suppress unused var warning
            stan::math::initialize(sum_ft_inner, DUMMY_VAR__);
            stan::math::fill(sum_ft_inner, DUMMY_VAR__);
            current_statement_begin__ = 117;
            validate_non_negative_index("eta", "N", N);
            std::vector<double> eta(N, double(0));
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 118;
            double k2;
            (void) k2;  // dummy to suppress unused var warning
            stan::math::initialize(k2, DUMMY_VAR__);
            stan::math::fill(k2, DUMMY_VAR__);
            current_statement_begin__ = 119;
            double E2;
            (void) E2;  // dummy to suppress unused var warning
            stan::math::initialize(E2, DUMMY_VAR__);
            stan::math::fill(E2, DUMMY_VAR__);
            current_statement_begin__ = 120;
            double E2d;
            (void) E2d;  // dummy to suppress unused var warning
            stan::math::initialize(E2d, DUMMY_VAR__);
            stan::math::fill(E2d, DUMMY_VAR__);
            current_statement_begin__ = 121;
            validate_non_negative_index("theta", "2", 2);
            std::vector<double> theta(2, double(0));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 122;
            validate_non_negative_index("y_hat", "T", T);
            validate_non_negative_index("y_hat", "12", 12);
            std::vector<std::vector<double> > y_hat(T, std::vector<double>(12, double(0)));
            stan::math::initialize(y_hat, DUMMY_VAR__);
            stan::math::fill(y_hat, DUMMY_VAR__);
            current_statement_begin__ = 123;
            double this_samp;
            (void) this_samp;  // dummy to suppress unused var warning
            stan::math::initialize(this_samp, DUMMY_VAR__);
            stan::math::fill(this_samp, DUMMY_VAR__);
            current_statement_begin__ = 124;
            validate_non_negative_index("alpha", "N", N);
            std::vector<double> alpha(N, double(0));
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 125;
            validate_non_negative_index("beta", "N", N);
            std::vector<double> beta(N, double(0));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 126;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        R0, 
                        "assigning variable theta");
            current_statement_begin__ = 127;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        f2, 
                        "assigning variable theta");
            current_statement_begin__ = 129;
            stan::math::assign(y_hat, integrate_ode_bdf(seeiqr_functor__(), y0, t0, time, theta, x_r, x_i, pstream__, get_base1(ode_control, 1, "ode_control", 1), get_base1(ode_control, 2, "ode_control", 1), get_base1(ode_control, 3, "ode_control", 1)));
            current_statement_begin__ = 131;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 132;
                stan::math::assign(this_samp, get_base1(sampFrac, n, "sampFrac", 1));
                current_statement_begin__ = 133;
                if (as_bool(logical_gt(n_sampFrac2, 1))) {
                    current_statement_begin__ = 134;
                    if (as_bool((primitive_value(logical_gte(n, day_inc_sampling)) && primitive_value(logical_lte(n, last_day_obs))))) {
                        current_statement_begin__ = 135;
                        stan::math::assign(this_samp, get_base1(sampFrac2, ((n - day_inc_sampling) + 1), "sampFrac2", 1));
                    }
                    current_statement_begin__ = 137;
                    if (as_bool((primitive_value(logical_gte(n, day_inc_sampling)) && primitive_value(logical_gt(n, last_day_obs))))) {
                        current_statement_begin__ = 138;
                        stan::math::assign(this_samp, get_base1(sampFrac2, n_sampFrac2, "sampFrac2", 1));
                    }
                }
                current_statement_begin__ = 141;
                if (as_bool(logical_eq(n_sampFrac2, 1))) {
                    current_statement_begin__ = 142;
                    stan::math::assign(this_samp, get_base1(sampFrac2, 1, "sampFrac2", 1));
                }
                current_statement_begin__ = 144;
                for (int t = 1; t <= T; ++t) {
                    current_statement_begin__ = 145;
                    stan::model::assign(ft, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable ft");
                }
                current_statement_begin__ = 147;
                for (int t = get_base1(time_day_id0, n, "time_day_id0", 1); t <= get_base1(time_day_id, n, "time_day_id", 1); ++t) {
                    current_statement_begin__ = 148;
                    stan::math::assign(k2, get_base1(x_r, 4, "x_r", 1));
                    current_statement_begin__ = 149;
                    stan::math::assign(E2, get_base1(get_base1(y_hat, t, "y_hat", 1), 3, "y_hat", 2));
                    current_statement_begin__ = 150;
                    stan::math::assign(E2d, get_base1(get_base1(y_hat, t, "y_hat", 1), 9, "y_hat", 2));
                    current_statement_begin__ = 152;
                    stan::model::assign(ft, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                (((this_samp * k2) * (E2 + E2d)) * stan::math::exp(weibull_log((get_base1(time, get_base1(time_day_id, n, "time_day_id", 1), "time", 1) - get_base1(time, t, "time", 1)), delayShape, delayScale))), 
                                "assigning variable ft");
                }
                current_statement_begin__ = 155;
                stan::math::assign(sum_ft_inner, 0);
                current_statement_begin__ = 156;
                for (int t = (get_base1(time_day_id0, n, "time_day_id0", 1) + 1); t <= (get_base1(time_day_id, n, "time_day_id", 1) - 1); ++t) {
                    current_statement_begin__ = 157;
                    stan::math::assign(sum_ft_inner, (sum_ft_inner + get_base1(ft, t, "ft", 1)));
                }
                current_statement_begin__ = 159;
                stan::model::assign(lambda_d, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            ((0.5 * dx) * ((get_base1(ft, get_base1(time_day_id0, n, "time_day_id0", 1), "ft", 1) + (2 * sum_ft_inner)) + get_base1(ft, get_base1(time_day_id, n, "time_day_id", 1), "ft", 1))), 
                            "assigning variable lambda_d");
                current_statement_begin__ = 161;
                stan::model::assign(eta, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            stan::math::log(get_base1(lambda_d, n, "lambda_d", 1)), 
                            "assigning variable eta");
            }
            current_statement_begin__ = 164;
            if (as_bool(logical_eq(obs_model, 2))) {
                current_statement_begin__ = 165;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 166;
                    stan::model::assign(eta, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                inv_logit(stan::math::exp(get_base1(eta, n, "eta", 1))), 
                                "assigning variable eta");
                    current_statement_begin__ = 167;
                    stan::model::assign(alpha, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (get_base1(eta, n, "eta", 1) * get_base1(phi, 1, "phi", 1)), 
                                "assigning variable alpha");
                    current_statement_begin__ = 168;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                ((1 - get_base1(eta, n, "eta", 1)) * get_base1(phi, 1, "phi", 1)), 
                                "assigning variable beta");
                }
            } else {
                current_statement_begin__ = 171;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 172;
                    stan::model::assign(alpha, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable alpha");
                    current_statement_begin__ = 173;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable beta");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 124;
            size_t alpha_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "alpha[i_0__]", alpha[i_0__], 0);
            }
            current_statement_begin__ = 125;
            size_t beta_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "beta[i_0__]", beta[i_0__], 0);
            }
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(meanDelay);
                vars__.push_back(dx);
                size_t ft_k_0_max__ = T;
                for (size_t k_0__ = 0; k_0__ < ft_k_0_max__; ++k_0__) {
                    vars__.push_back(ft[k_0__]);
                }
                size_t lambda_d_k_0_max__ = N;
                for (size_t k_0__ = 0; k_0__ < lambda_d_k_0_max__; ++k_0__) {
                    vars__.push_back(lambda_d[k_0__]);
                }
                vars__.push_back(sum_ft_inner);
                size_t eta_k_0_max__ = N;
                for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                    vars__.push_back(eta[k_0__]);
                }
                vars__.push_back(k2);
                vars__.push_back(E2);
                vars__.push_back(E2d);
                size_t theta_k_0_max__ = 2;
                for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                    vars__.push_back(theta[k_0__]);
                }
                size_t y_hat_k_0_max__ = T;
                size_t y_hat_k_1_max__ = 12;
                for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                        vars__.push_back(y_hat[k_0__][k_1__]);
                    }
                }
                vars__.push_back(this_samp);
                size_t alpha_k_0_max__ = N;
                for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                    vars__.push_back(alpha[k_0__]);
                }
                size_t beta_k_0_max__ = N;
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    vars__.push_back(beta[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 212;
            validate_non_negative_index("y_rep", "N", N);
            std::vector<int> y_rep(N, int(0));
            stan::math::fill(y_rep, std::numeric_limits<int>::min());
            // generated quantities statements
            current_statement_begin__ = 213;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 214;
                if (as_bool(logical_eq(obs_model, 0))) {
                    current_statement_begin__ = 215;
                    stan::model::assign(y_rep, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                poisson_log_rng(get_base1(eta, n, "eta", 1), base_rng__), 
                                "assigning variable y_rep");
                } else if (as_bool(logical_eq(obs_model, 1))) {
                    current_statement_begin__ = 217;
                    stan::model::assign(y_rep, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                neg_binomial_2_log_rng(get_base1(eta, n, "eta", 1), get_base1(phi, 1, "phi", 1), base_rng__), 
                                "assigning variable y_rep");
                } else {
                    current_statement_begin__ = 219;
                    stan::model::assign(y_rep, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                beta_binomial_rng(get_base1(tests, n, "tests", 1), get_base1(alpha, n, "alpha", 1), get_base1(beta, n, "beta", 1), base_rng__), 
                                "assigning variable y_rep");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 212;
            size_t y_rep_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
                vars__.push_back(y_rep[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_seeiqr";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "R0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f2";
        param_names__.push_back(param_name_stream__.str());
        size_t phi_k_0_max__ = est_phi;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sampFrac2_k_0_max__ = n_sampFrac2;
        for (size_t k_0__ = 0; k_0__ < sampFrac2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sampFrac2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "meanDelay";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "dx";
            param_names__.push_back(param_name_stream__.str());
            size_t ft_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < ft_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ft" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_d_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < lambda_d_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_d" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "sum_ft_inner";
            param_names__.push_back(param_name_stream__.str());
            size_t eta_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "k2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "E2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "E2d";
            param_names__.push_back(param_name_stream__.str());
            size_t theta_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t y_hat_k_0_max__ = T;
            size_t y_hat_k_1_max__ = 12;
            for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "y_hat" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "this_samp";
            param_names__.push_back(param_name_stream__.str());
            size_t alpha_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "R0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f2";
        param_names__.push_back(param_name_stream__.str());
        size_t phi_k_0_max__ = est_phi;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sampFrac2_k_0_max__ = n_sampFrac2;
        for (size_t k_0__ = 0; k_0__ < sampFrac2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sampFrac2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "meanDelay";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "dx";
            param_names__.push_back(param_name_stream__.str());
            size_t ft_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < ft_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ft" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_d_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < lambda_d_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_d" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "sum_ft_inner";
            param_names__.push_back(param_name_stream__.str());
            size_t eta_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "k2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "E2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "E2d";
            param_names__.push_back(param_name_stream__.str());
            size_t theta_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t y_hat_k_0_max__ = T;
            size_t y_hat_k_1_max__ = 12;
            for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "y_hat" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "this_samp";
            param_names__.push_back(param_name_stream__.str());
            size_t alpha_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_seeiqr_namespace::model_seeiqr stan_model;
#endif
